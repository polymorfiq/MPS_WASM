package WebassemblyText.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.style.AbstractStyleClass;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.editor.runtime.descriptor.EditorBuilderEnvironment;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSColors;

public class MainStyle_StyleSheet {
  public static class funcnameStyleClass extends AbstractStyleClass {
    public funcnameStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public funcnameStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.orange));
    }

  }
  public static class fieldnameStyleClass extends AbstractStyleClass {
    public fieldnameStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public fieldnameStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.yellow));
    }

  }
  public static class constnameStyleClass extends AbstractStyleClass {
    public constnameStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public constnameStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.LIGHT_BLUE));
    }

  }
  public static class labelStyleClass extends AbstractStyleClass {
    public labelStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public labelStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.red));
    }

  }
  public static class stringStyleClass extends AbstractStyleClass {
    public stringStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public stringStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.blue));
    }

  }
  public static class typeStyleClass extends AbstractStyleClass {
    public typeStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public typeStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.LIGHT_BLUE));
    }

  }
}
