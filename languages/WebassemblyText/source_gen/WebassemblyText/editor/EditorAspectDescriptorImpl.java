package WebassemblyText.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BinOp_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Const_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Data_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DataString_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Elem_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ElemExpr_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ElemList_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new EmptyField_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new EmptyInstr_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Export_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new ExportFunc_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ExportGlobal_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new ExportMemory_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new ExportTable_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Expression_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Func_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new FuncType_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Global_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new GlobalType_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new Identifier_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Import_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new ImportFunc_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new ImportGlobal_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new ImportMemory_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new ImportTable_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new Index_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new Limits_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new Local_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new LocalGet_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new MemType_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new MemUse_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new Memory_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new Module_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new ModuleFieldList_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new Name_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new Number_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new OffsetExpr_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new Param_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new Result_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new Start_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new Table_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new TableUse_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new Type_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new TypeUse_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new U32Value_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new UnaryOp_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec489e4cL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec4c3bfeL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed415b97L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed415c29L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed415aefL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed41568dL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed415741L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2d530eL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46d415L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e6e6L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed3ed993L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed3eda51L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed3eda11L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed3ed9ccL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46d411L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e659L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e7d1L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed3c81ffL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2a9763L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e6a0L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed156e1cL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2a9665L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2b2aa0L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2b2a93L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2a96b7L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2b2a4bL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2a96c3L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e72cL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec57bf17L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2b295fL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed415ba2L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed18a785L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46d40cL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed28956fL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e65bL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed1a77b2L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed415bdaL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e77dL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e7d9L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec480860L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed31c142L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed415705L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed289514L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e779L), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed3a988cL), MetaIdFactory.conceptId(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec4956adL)).seal();
}
