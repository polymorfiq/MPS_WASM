package WebassemblyText.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;

public class TableType_Constraints extends BaseConstraintsDescriptor {
  public TableType_Constraints() {
    super(CONCEPTS.TableType$FU);
  }

  public static class Et_Property extends BasePropertyConstraintsDescriptor {
    public Et_Property(ConstraintsDescriptor container) {
      super(PROPS.et$miyt, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castEnummember(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:04ca66b1-c203-4170-93b5-4cde56486cd7(WebassemblyText.constraints)", "6925410296608233440"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, SEnumerationLiteral propertyValue) {
      return propertyValue == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2a9769L, "WebassemblyText.structure.ValType"), 0x601bfff8ed2a978aL, "externref") || propertyValue == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2a9769L, "WebassemblyText.structure.ValType"), 0x601bfff8ed2a9782L, "funcref");
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.et$miyt, new Et_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TableType$FU = MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2a975aL, "WebassemblyText.structure.TableType");
  }

  private static final class PROPS {
    /*package*/ static final SProperty et$miyt = MetaAdapterFactory.getProperty(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2a975aL, 0x601bfff8ed2a975cL, "et");
  }
}
