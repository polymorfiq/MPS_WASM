package WebassemblyText.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int BinOp = 0;
  public static final int Const = 1;
  public static final int Data = 2;
  public static final int DataIdx = 3;
  public static final int DataString = 4;
  public static final int DataType = 5;
  public static final int Elem = 6;
  public static final int ElemExpr = 7;
  public static final int ElemIdx = 8;
  public static final int ElemList = 9;
  public static final int EmptyField = 10;
  public static final int EmptyInstr = 11;
  public static final int Export = 12;
  public static final int ExportDesc = 13;
  public static final int ExportFunc = 14;
  public static final int ExportGlobal = 15;
  public static final int ExportMemory = 16;
  public static final int ExportTable = 17;
  public static final int Expression = 18;
  public static final int ExternRefType = 19;
  public static final int ExternType = 20;
  public static final int F32 = 21;
  public static final int F32Add = 22;
  public static final int F32BinOp = 23;
  public static final int F32Const = 24;
  public static final int F64 = 25;
  public static final int F64Add = 26;
  public static final int F64BinOp = 27;
  public static final int F64Const = 28;
  public static final int Func = 29;
  public static final int FuncIdx = 30;
  public static final int FuncRefType = 31;
  public static final int FuncType = 32;
  public static final int Global = 33;
  public static final int GlobalIdx = 34;
  public static final int GlobalType = 35;
  public static final int I32 = 36;
  public static final int I32Add = 37;
  public static final int I32BinOp = 38;
  public static final int I32Const = 39;
  public static final int I64 = 40;
  public static final int I64Add = 41;
  public static final int I64BinOp = 42;
  public static final int I64Const = 43;
  public static final int Identifier = 44;
  public static final int Import = 45;
  public static final int ImportDesc = 46;
  public static final int ImportFunc = 47;
  public static final int ImportGlobal = 48;
  public static final int ImportMemory = 49;
  public static final int ImportTable = 50;
  public static final int Index = 51;
  public static final int Instr = 52;
  public static final int LabelIdx = 53;
  public static final int Limits = 54;
  public static final int Local = 55;
  public static final int LocalGet = 56;
  public static final int LocalIdx = 57;
  public static final int MemIdx = 58;
  public static final int MemType = 59;
  public static final int MemUse = 60;
  public static final int Memory = 61;
  public static final int Module = 62;
  public static final int ModuleField = 63;
  public static final int ModuleFieldList = 64;
  public static final int Name = 65;
  public static final int Number = 66;
  public static final int OffsetExpr = 67;
  public static final int Param = 68;
  public static final int Result = 69;
  public static final int StackItem = 70;
  public static final int Start = 71;
  public static final int Table = 72;
  public static final int TableIdx = 73;
  public static final int TableType = 74;
  public static final int TableUse = 75;
  public static final int Type = 76;
  public static final int TypeIdx = 77;
  public static final int TypeUse = 78;
  public static final int U32 = 79;
  public static final int U32Value = 80;
  public static final int UnaryOp = 81;
  public static final int V128 = 82;
  public static final int V128Type = 83;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L);
    builder.put(0x601bfff8ec489e4cL, BinOp);
    builder.put(0x601bfff8ec4c3bfeL, Const);
    builder.put(0x601bfff8ed415b97L, Data);
    builder.put(0x601bfff8ed2b2a6cL, DataIdx);
    builder.put(0x601bfff8ed415c29L, DataString);
    builder.put(0x601bfff8ec4a11d4L, DataType);
    builder.put(0x601bfff8ed415aefL, Elem);
    builder.put(0x601bfff8ed41568dL, ElemExpr);
    builder.put(0x601bfff8ed2b2a69L, ElemIdx);
    builder.put(0x601bfff8ed415741L, ElemList);
    builder.put(0x601bfff8ed2d530eL, EmptyField);
    builder.put(0x601bfff8ec46d415L, EmptyInstr);
    builder.put(0x601bfff8ec46e6e6L, Export);
    builder.put(0x601bfff8ed3ed991L, ExportDesc);
    builder.put(0x601bfff8ed3ed993L, ExportFunc);
    builder.put(0x601bfff8ed3eda51L, ExportGlobal);
    builder.put(0x601bfff8ed3eda11L, ExportMemory);
    builder.put(0x601bfff8ed3ed9ccL, ExportTable);
    builder.put(0x601bfff8ec46d411L, Expression);
    builder.put(0x601bfff8ed347bbfL, ExternRefType);
    builder.put(0x601bfff8ed347bbbL, ExternType);
    builder.put(0x601bfff8ec49ee2eL, F32);
    builder.put(0x601bfff8ec4cf760L, F32Add);
    builder.put(0x601bfff8ec4cf756L, F32BinOp);
    builder.put(0x601bfff8ec4956f2L, F32Const);
    builder.put(0x601bfff8ec49ee30L, F64);
    builder.put(0x601bfff8ec4cf763L, F64Add);
    builder.put(0x601bfff8ec4cf75aL, F64BinOp);
    builder.put(0x601bfff8ec4956f4L, F64Const);
    builder.put(0x601bfff8ec46e659L, Func);
    builder.put(0x601bfff8ed2b2a5dL, FuncIdx);
    builder.put(0x601bfff8ed34d5d4L, FuncRefType);
    builder.put(0x601bfff8ec46e7d1L, FuncType);
    builder.put(0x601bfff8ed3c81ffL, Global);
    builder.put(0x601bfff8ed2b2a65L, GlobalIdx);
    builder.put(0x601bfff8ed2a9763L, GlobalType);
    builder.put(0x601bfff8ec49ee2bL, I32);
    builder.put(0x601bfff8ec48cfe6L, I32Add);
    builder.put(0x601bfff8ec4a11e1L, I32BinOp);
    builder.put(0x601bfff8ec4956ecL, I32Const);
    builder.put(0x601bfff8ec49ee2cL, I64);
    builder.put(0x601bfff8ec4cf75eL, I64Add);
    builder.put(0x601bfff8ec4cf74fL, I64BinOp);
    builder.put(0x601bfff8ec4956efL, I64Const);
    builder.put(0x601bfff8ec46e6a0L, Identifier);
    builder.put(0x601bfff8ed156e1cL, Import);
    builder.put(0x601bfff8ed2a9668L, ImportDesc);
    builder.put(0x601bfff8ed2a9665L, ImportFunc);
    builder.put(0x601bfff8ed2b2aa0L, ImportGlobal);
    builder.put(0x601bfff8ed2b2a93L, ImportMemory);
    builder.put(0x601bfff8ed2a96b7L, ImportTable);
    builder.put(0x601bfff8ed2b2a4bL, Index);
    builder.put(0x601bfff8ec46d40eL, Instr);
    builder.put(0x601bfff8ed2b2a72L, LabelIdx);
    builder.put(0x601bfff8ed2a96c3L, Limits);
    builder.put(0x601bfff8ec46e72cL, Local);
    builder.put(0x601bfff8ec57bf17L, LocalGet);
    builder.put(0x601bfff8ed2b2a6fL, LocalIdx);
    builder.put(0x601bfff8ed2b2a62L, MemIdx);
    builder.put(0x601bfff8ed2b295fL, MemType);
    builder.put(0x601bfff8ed415ba2L, MemUse);
    builder.put(0x601bfff8ed18a785L, Memory);
    builder.put(0x601bfff8ec46d40cL, Module);
    builder.put(0x601bfff8ed289507L, ModuleField);
    builder.put(0x601bfff8ed28956fL, ModuleFieldList);
    builder.put(0x601bfff8ec46e65bL, Name);
    builder.put(0x601bfff8ed1a77b2L, Number);
    builder.put(0x601bfff8ed415bdaL, OffsetExpr);
    builder.put(0x601bfff8ec46e77dL, Param);
    builder.put(0x601bfff8ec46e7d9L, Result);
    builder.put(0x601bfff8ec6d40a9L, StackItem);
    builder.put(0x601bfff8ec480860L, Start);
    builder.put(0x601bfff8ed31c142L, Table);
    builder.put(0x601bfff8ed2b2a5fL, TableIdx);
    builder.put(0x601bfff8ed2a975aL, TableType);
    builder.put(0x601bfff8ed415705L, TableUse);
    builder.put(0x601bfff8ed289514L, Type);
    builder.put(0x601bfff8ed2b2a52L, TypeIdx);
    builder.put(0x601bfff8ec46e779L, TypeUse);
    builder.put(0x601bfff8ed2a96cdL, U32);
    builder.put(0x601bfff8ed3a988cL, U32Value);
    builder.put(0x601bfff8ec4956adL, UnaryOp);
    builder.put(0x601bfff8ec49ee32L, V128);
    builder.put(0x601bfff8ed351cbbL, V128Type);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
