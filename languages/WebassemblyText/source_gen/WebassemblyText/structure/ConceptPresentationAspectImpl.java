package WebassemblyText.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BinOp;
  private ConceptPresentation props_Const;
  private ConceptPresentation props_Data;
  private ConceptPresentation props_DataIdx;
  private ConceptPresentation props_DataString;
  private ConceptPresentation props_DataType;
  private ConceptPresentation props_Elem;
  private ConceptPresentation props_ElemExpr;
  private ConceptPresentation props_ElemIdx;
  private ConceptPresentation props_ElemList;
  private ConceptPresentation props_EmptyField;
  private ConceptPresentation props_EmptyInstr;
  private ConceptPresentation props_Export;
  private ConceptPresentation props_ExportDesc;
  private ConceptPresentation props_ExportFunc;
  private ConceptPresentation props_ExportGlobal;
  private ConceptPresentation props_ExportMemory;
  private ConceptPresentation props_ExportTable;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_ExternRefType;
  private ConceptPresentation props_ExternType;
  private ConceptPresentation props_F32;
  private ConceptPresentation props_F32Add;
  private ConceptPresentation props_F32BinOp;
  private ConceptPresentation props_F32Const;
  private ConceptPresentation props_F64;
  private ConceptPresentation props_F64Add;
  private ConceptPresentation props_F64BinOp;
  private ConceptPresentation props_F64Const;
  private ConceptPresentation props_Func;
  private ConceptPresentation props_FuncIdx;
  private ConceptPresentation props_FuncRefType;
  private ConceptPresentation props_FuncType;
  private ConceptPresentation props_Global;
  private ConceptPresentation props_GlobalIdx;
  private ConceptPresentation props_GlobalType;
  private ConceptPresentation props_I32;
  private ConceptPresentation props_I32Add;
  private ConceptPresentation props_I32BinOp;
  private ConceptPresentation props_I32Const;
  private ConceptPresentation props_I64;
  private ConceptPresentation props_I64Add;
  private ConceptPresentation props_I64BinOp;
  private ConceptPresentation props_I64Const;
  private ConceptPresentation props_Identifier;
  private ConceptPresentation props_Import;
  private ConceptPresentation props_ImportDesc;
  private ConceptPresentation props_ImportFunc;
  private ConceptPresentation props_ImportGlobal;
  private ConceptPresentation props_ImportMemory;
  private ConceptPresentation props_ImportTable;
  private ConceptPresentation props_Index;
  private ConceptPresentation props_Instr;
  private ConceptPresentation props_LabelIdx;
  private ConceptPresentation props_Limits;
  private ConceptPresentation props_Local;
  private ConceptPresentation props_LocalGet;
  private ConceptPresentation props_LocalIdx;
  private ConceptPresentation props_MemIdx;
  private ConceptPresentation props_MemType;
  private ConceptPresentation props_MemUse;
  private ConceptPresentation props_Memory;
  private ConceptPresentation props_Module;
  private ConceptPresentation props_ModuleField;
  private ConceptPresentation props_ModuleFieldList;
  private ConceptPresentation props_Name;
  private ConceptPresentation props_Number;
  private ConceptPresentation props_OffsetExpr;
  private ConceptPresentation props_Param;
  private ConceptPresentation props_Result;
  private ConceptPresentation props_StackItem;
  private ConceptPresentation props_Start;
  private ConceptPresentation props_Table;
  private ConceptPresentation props_TableIdx;
  private ConceptPresentation props_TableType;
  private ConceptPresentation props_TableUse;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_TypeIdx;
  private ConceptPresentation props_TypeUse;
  private ConceptPresentation props_U32;
  private ConceptPresentation props_U32Value;
  private ConceptPresentation props_UnaryOp;
  private ConceptPresentation props_V128;
  private ConceptPresentation props_V128Type;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BinOp:
        if (props_BinOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BinOp = cpb.create();
        }
        return props_BinOp;
      case LanguageConceptSwitch.Const:
        if (props_Const == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Const = cpb.create();
        }
        return props_Const;
      case LanguageConceptSwitch.Data:
        if (props_Data == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("data");
          props_Data = cpb.create();
        }
        return props_Data;
      case LanguageConceptSwitch.DataIdx:
        if (props_DataIdx == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DataIdx");
          props_DataIdx = cpb.create();
        }
        return props_DataIdx;
      case LanguageConceptSwitch.DataString:
        if (props_DataString == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("\"");
          props_DataString = cpb.create();
        }
        return props_DataString;
      case LanguageConceptSwitch.DataType:
        if (props_DataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DataType = cpb.create();
        }
        return props_DataType;
      case LanguageConceptSwitch.Elem:
        if (props_Elem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("elem");
          props_Elem = cpb.create();
        }
        return props_Elem;
      case LanguageConceptSwitch.ElemExpr:
        if (props_ElemExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ElemExpr");
          props_ElemExpr = cpb.create();
        }
        return props_ElemExpr;
      case LanguageConceptSwitch.ElemIdx:
        if (props_ElemIdx == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ElemIdx");
          props_ElemIdx = cpb.create();
        }
        return props_ElemIdx;
      case LanguageConceptSwitch.ElemList:
        if (props_ElemList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ElemList");
          props_ElemList = cpb.create();
        }
        return props_ElemList;
      case LanguageConceptSwitch.EmptyField:
        if (props_EmptyField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyField");
          props_EmptyField = cpb.create();
        }
        return props_EmptyField;
      case LanguageConceptSwitch.EmptyInstr:
        if (props_EmptyInstr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyInstr");
          props_EmptyInstr = cpb.create();
        }
        return props_EmptyInstr;
      case LanguageConceptSwitch.Export:
        if (props_Export == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("export");
          props_Export = cpb.create();
        }
        return props_Export;
      case LanguageConceptSwitch.ExportDesc:
        if (props_ExportDesc == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExportDesc");
          props_ExportDesc = cpb.create();
        }
        return props_ExportDesc;
      case LanguageConceptSwitch.ExportFunc:
        if (props_ExportFunc == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("func");
          props_ExportFunc = cpb.create();
        }
        return props_ExportFunc;
      case LanguageConceptSwitch.ExportGlobal:
        if (props_ExportGlobal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("global");
          props_ExportGlobal = cpb.create();
        }
        return props_ExportGlobal;
      case LanguageConceptSwitch.ExportMemory:
        if (props_ExportMemory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExportMemory");
          props_ExportMemory = cpb.create();
        }
        return props_ExportMemory;
      case LanguageConceptSwitch.ExportTable:
        if (props_ExportTable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("table");
          props_ExportTable = cpb.create();
        }
        return props_ExportTable;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Expression");
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.ExternRefType:
        if (props_ExternRefType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExternRefType");
          props_ExternRefType = cpb.create();
        }
        return props_ExternRefType;
      case LanguageConceptSwitch.ExternType:
        if (props_ExternType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExternType");
          props_ExternType = cpb.create();
        }
        return props_ExternType;
      case LanguageConceptSwitch.F32:
        if (props_F32 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("F32");
          props_F32 = cpb.create();
        }
        return props_F32;
      case LanguageConceptSwitch.F32Add:
        if (props_F32Add == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("f32.add");
          props_F32Add = cpb.create();
        }
        return props_F32Add;
      case LanguageConceptSwitch.F32BinOp:
        if (props_F32BinOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_F32BinOp = cpb.create();
        }
        return props_F32BinOp;
      case LanguageConceptSwitch.F32Const:
        if (props_F32Const == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("f32.const");
          props_F32Const = cpb.create();
        }
        return props_F32Const;
      case LanguageConceptSwitch.F64:
        if (props_F64 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("F64");
          props_F64 = cpb.create();
        }
        return props_F64;
      case LanguageConceptSwitch.F64Add:
        if (props_F64Add == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("f64.add");
          props_F64Add = cpb.create();
        }
        return props_F64Add;
      case LanguageConceptSwitch.F64BinOp:
        if (props_F64BinOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_F64BinOp = cpb.create();
        }
        return props_F64BinOp;
      case LanguageConceptSwitch.F64Const:
        if (props_F64Const == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("f64.const");
          props_F64Const = cpb.create();
        }
        return props_F64Const;
      case LanguageConceptSwitch.Func:
        if (props_Func == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("func");
          props_Func = cpb.create();
        }
        return props_Func;
      case LanguageConceptSwitch.FuncIdx:
        if (props_FuncIdx == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FuncIdx");
          props_FuncIdx = cpb.create();
        }
        return props_FuncIdx;
      case LanguageConceptSwitch.FuncRefType:
        if (props_FuncRefType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FuncRefType");
          props_FuncRefType = cpb.create();
        }
        return props_FuncRefType;
      case LanguageConceptSwitch.FuncType:
        if (props_FuncType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("functype");
          props_FuncType = cpb.create();
        }
        return props_FuncType;
      case LanguageConceptSwitch.Global:
        if (props_Global == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("global");
          props_Global = cpb.create();
        }
        return props_Global;
      case LanguageConceptSwitch.GlobalIdx:
        if (props_GlobalIdx == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GlobalIdx");
          props_GlobalIdx = cpb.create();
        }
        return props_GlobalIdx;
      case LanguageConceptSwitch.GlobalType:
        if (props_GlobalType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GlobalType");
          props_GlobalType = cpb.create();
        }
        return props_GlobalType;
      case LanguageConceptSwitch.I32:
        if (props_I32 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("I32");
          props_I32 = cpb.create();
        }
        return props_I32;
      case LanguageConceptSwitch.I32Add:
        if (props_I32Add == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("i32.add");
          props_I32Add = cpb.create();
        }
        return props_I32Add;
      case LanguageConceptSwitch.I32BinOp:
        if (props_I32BinOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("I32BinOp");
          props_I32BinOp = cpb.create();
        }
        return props_I32BinOp;
      case LanguageConceptSwitch.I32Const:
        if (props_I32Const == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("i32.const");
          props_I32Const = cpb.create();
        }
        return props_I32Const;
      case LanguageConceptSwitch.I64:
        if (props_I64 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("I64");
          props_I64 = cpb.create();
        }
        return props_I64;
      case LanguageConceptSwitch.I64Add:
        if (props_I64Add == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("i64.add");
          props_I64Add = cpb.create();
        }
        return props_I64Add;
      case LanguageConceptSwitch.I64BinOp:
        if (props_I64BinOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_I64BinOp = cpb.create();
        }
        return props_I64BinOp;
      case LanguageConceptSwitch.I64Const:
        if (props_I64Const == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("i64.const");
          props_I64Const = cpb.create();
        }
        return props_I64Const;
      case LanguageConceptSwitch.Identifier:
        if (props_Identifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Identifier");
          props_Identifier = cpb.create();
        }
        return props_Identifier;
      case LanguageConceptSwitch.Import:
        if (props_Import == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("import");
          props_Import = cpb.create();
        }
        return props_Import;
      case LanguageConceptSwitch.ImportDesc:
        if (props_ImportDesc == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ImportDesc = cpb.create();
        }
        return props_ImportDesc;
      case LanguageConceptSwitch.ImportFunc:
        if (props_ImportFunc == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("func");
          props_ImportFunc = cpb.create();
        }
        return props_ImportFunc;
      case LanguageConceptSwitch.ImportGlobal:
        if (props_ImportGlobal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("global");
          props_ImportGlobal = cpb.create();
        }
        return props_ImportGlobal;
      case LanguageConceptSwitch.ImportMemory:
        if (props_ImportMemory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("memory");
          props_ImportMemory = cpb.create();
        }
        return props_ImportMemory;
      case LanguageConceptSwitch.ImportTable:
        if (props_ImportTable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("table");
          props_ImportTable = cpb.create();
        }
        return props_ImportTable;
      case LanguageConceptSwitch.Index:
        if (props_Index == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Index = cpb.create();
        }
        return props_Index;
      case LanguageConceptSwitch.Instr:
        if (props_Instr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Instr = cpb.create();
        }
        return props_Instr;
      case LanguageConceptSwitch.LabelIdx:
        if (props_LabelIdx == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LabelIdx");
          props_LabelIdx = cpb.create();
        }
        return props_LabelIdx;
      case LanguageConceptSwitch.Limits:
        if (props_Limits == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("limits");
          props_Limits = cpb.create();
        }
        return props_Limits;
      case LanguageConceptSwitch.Local:
        if (props_Local == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("local");
          props_Local = cpb.create();
        }
        return props_Local;
      case LanguageConceptSwitch.LocalGet:
        if (props_LocalGet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("local.get");
          props_LocalGet = cpb.create();
        }
        return props_LocalGet;
      case LanguageConceptSwitch.LocalIdx:
        if (props_LocalIdx == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LocalIdx");
          props_LocalIdx = cpb.create();
        }
        return props_LocalIdx;
      case LanguageConceptSwitch.MemIdx:
        if (props_MemIdx == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MemIdx");
          props_MemIdx = cpb.create();
        }
        return props_MemIdx;
      case LanguageConceptSwitch.MemType:
        if (props_MemType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MemType");
          props_MemType = cpb.create();
        }
        return props_MemType;
      case LanguageConceptSwitch.MemUse:
        if (props_MemUse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MemUse");
          props_MemUse = cpb.create();
        }
        return props_MemUse;
      case LanguageConceptSwitch.Memory:
        if (props_Memory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("memory");
          props_Memory = cpb.create();
        }
        return props_Memory;
      case LanguageConceptSwitch.Module:
        if (props_Module == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Module = cpb.create();
        }
        return props_Module;
      case LanguageConceptSwitch.ModuleField:
        if (props_ModuleField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ModuleField = cpb.create();
        }
        return props_ModuleField;
      case LanguageConceptSwitch.ModuleFieldList:
        if (props_ModuleFieldList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ModuleFieldList");
          props_ModuleFieldList = cpb.create();
        }
        return props_ModuleFieldList;
      case LanguageConceptSwitch.Name:
        if (props_Name == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Name");
          props_Name = cpb.create();
        }
        return props_Name;
      case LanguageConceptSwitch.Number:
        if (props_Number == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Number");
          props_Number = cpb.create();
        }
        return props_Number;
      case LanguageConceptSwitch.OffsetExpr:
        if (props_OffsetExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("offset");
          props_OffsetExpr = cpb.create();
        }
        return props_OffsetExpr;
      case LanguageConceptSwitch.Param:
        if (props_Param == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Param");
          props_Param = cpb.create();
        }
        return props_Param;
      case LanguageConceptSwitch.Result:
        if (props_Result == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Result");
          props_Result = cpb.create();
        }
        return props_Result;
      case LanguageConceptSwitch.StackItem:
        if (props_StackItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StackItem");
          props_StackItem = cpb.create();
        }
        return props_StackItem;
      case LanguageConceptSwitch.Start:
        if (props_Start == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("start");
          props_Start = cpb.create();
        }
        return props_Start;
      case LanguageConceptSwitch.Table:
        if (props_Table == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("table");
          props_Table = cpb.create();
        }
        return props_Table;
      case LanguageConceptSwitch.TableIdx:
        if (props_TableIdx == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TableIdx");
          props_TableIdx = cpb.create();
        }
        return props_TableIdx;
      case LanguageConceptSwitch.TableType:
        if (props_TableType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TableType");
          props_TableType = cpb.create();
        }
        return props_TableType;
      case LanguageConceptSwitch.TableUse:
        if (props_TableUse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TableUse");
          props_TableUse = cpb.create();
        }
        return props_TableUse;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("type");
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.TypeIdx:
        if (props_TypeIdx == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeIdx");
          props_TypeIdx = cpb.create();
        }
        return props_TypeIdx;
      case LanguageConceptSwitch.TypeUse:
        if (props_TypeUse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeUse");
          props_TypeUse = cpb.create();
        }
        return props_TypeUse;
      case LanguageConceptSwitch.U32:
        if (props_U32 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("U32");
          props_U32 = cpb.create();
        }
        return props_U32;
      case LanguageConceptSwitch.U32Value:
        if (props_U32Value == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("u32");
          props_U32Value = cpb.create();
        }
        return props_U32Value;
      case LanguageConceptSwitch.UnaryOp:
        if (props_UnaryOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_UnaryOp = cpb.create();
        }
        return props_UnaryOp;
      case LanguageConceptSwitch.V128:
        if (props_V128 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("V128");
          props_V128 = cpb.create();
        }
        return props_V128;
      case LanguageConceptSwitch.V128Type:
        if (props_V128Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("V128Type");
          props_V128Type = cpb.create();
        }
        return props_V128Type;
    }
    return null;
  }
}
