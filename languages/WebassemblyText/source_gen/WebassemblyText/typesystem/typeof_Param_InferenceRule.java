package WebassemblyText.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_Param_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_Param_InferenceRule() {
  }
  public void applyRule(final SNode param, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode itemType;
    switch (enumSwitchIndex.indexNullable(SPropertyOperations.getEnum(param, PROPS.paramType$CULn))) {
      case 0:
        itemType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec49ee2bL, "WebassemblyText.structure.I32"));
        break;
      case 1:
        itemType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec49ee2cL, "WebassemblyText.structure.I64"));
        break;
      case 2:
        itemType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec49ee2eL, "WebassemblyText.structure.F32"));
        break;
      case 3:
        itemType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec49ee30L, "WebassemblyText.structure.F64"));
        break;
      case 4:
        itemType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed351cbbL, "WebassemblyText.structure.V128Type"));
        break;
      case 5:
        itemType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed347bbbL, "WebassemblyText.structure.ExternType"));
        break;
      case 6:
        itemType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed347bbfL, "WebassemblyText.structure.ExternRefType"));
        break;
      case 7:
        itemType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e7d1L, "WebassemblyText.structure.FuncType"));
        break;
      case 8:
        itemType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed34d5d4L, "WebassemblyText.structure.FuncRefType"));
        break;
      default:
        itemType = null;
    }

    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(param, LINKS.id$COrW);
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:53b811bf-ce98-4eeb-819f-783007083750(WebassemblyText.typesystem)", "6925410296600546385", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:53b811bf-ce98-4eeb-819f-783007083750(WebassemblyText.typesystem)", "6925410296600539953", true), (SNode) itemType, _info_12389875345);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Param$Kb;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static final EnumerationLiteralsIndex enumSwitchIndex = EnumerationLiteralsIndex.build(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ed2a9769L, 0x601bfff8ed2a976aL, 0x601bfff8ed2a976cL, 0x601bfff8ed2a9770L, 0x601bfff8ed2a9775L, 0x601bfff8ed2a977cL, 0x601bfff8ed2a979dL, 0x601bfff8ed2a978aL, 0x601bfff8ed2a9793L, 0x601bfff8ed2a9782L);

  private static final class PROPS {
    /*package*/ static final SProperty paramType$CULn = MetaAdapterFactory.getProperty(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e77dL, 0x601bfff8ec46e784L, "paramType");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink id$COrW = MetaAdapterFactory.getContainmentLink(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e77dL, 0x601bfff8ec46e77eL, "id");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Param$Kb = MetaAdapterFactory.getConcept(0x3ffc45fa71954470L, 0x834ba6b1a95f90d6L, 0x601bfff8ec46e77dL, "WebassemblyText.structure.Param");
  }
}
