package WebAssembly.binaryGen;

/*Generated by MPS */

import BinaryGen.runtime.runtime.BinaryGeneratorAspectDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import java.io.DataOutputStream;
import java.io.IOException;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class BinaryGeneratorDescriptor implements BinaryGeneratorAspectDescriptor {
  @Override
  public void generate(SNode node, DataOutputStream stream) throws IOException {
    DataOutputStream dataStream = new DataOutputStream(stream);
    SAbstractConcept cncpt = SNodeOperations.getConcept(node);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        if (true) {
          new Module_BinaryGen().generate(((SNode) node), dataStream);
        }
        break;
      default:
        throw new IOException("binaryGen cannot generate from node " + BaseConcept__BehaviorDescriptor.getDetailedPresentation_id22G2W3WJ92t.invoke(node));
    }
  }

  @Override
  public boolean hasBinaryGeneratorFor(SNode node) {
    SAbstractConcept cncpt = SNodeOperations.getConcept(node);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return true;
      default:
        return false;
    }
  }

  @Override
  public String filePath(SNode node) {
    SAbstractConcept cncpt = SNodeOperations.getConcept(node);
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return new Module_BinaryGen().filePath(((SNode) node));
      default:
        throw new IllegalArgumentException("node is without an associated binary generator");
    }
  }

  @Override
  public String fileName(SNode node) {
    SAbstractConcept cncpt = SNodeOperations.getConcept(node);
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return new Module_BinaryGen().fileName(((SNode) node));
      default:
        throw new IllegalArgumentException("node is without an associated binary generator");
    }
  }

  @Override
  public String extension(SNode node) {
    SAbstractConcept cncpt = SNodeOperations.getConcept(node);
    switch (conceptIndex4.index(cncpt)) {
      case 0:
        return new Module_BinaryGen().extension(((SNode) node));
      default:
        throw new IllegalArgumentException("node is without an associated binary generator");
    }
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed5920a4L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed5920a4L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed5920a4L)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed5920a4L)).seal();
  private static final ConceptSwitchIndex conceptIndex4 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed5920a4L)).seal();
}
