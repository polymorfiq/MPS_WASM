package WebAssembly.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ActiveData = 0;
  public static final int ActiveElem = 1;
  public static final int ActiveExplicitElem = 2;
  public static final int ActiveExplicitExprsElem = 3;
  public static final int ActiveExprsElem = 4;
  public static final int ActiveIndexedData = 5;
  public static final int Block = 6;
  public static final int BlockType = 7;
  public static final int Br = 8;
  public static final int BrIf = 9;
  public static final int BrTable = 10;
  public static final int ByteSized = 11;
  public static final int Call = 12;
  public static final int CallIndirect = 13;
  public static final int Code = 14;
  public static final int CodeSection = 15;
  public static final int CustomSection = 16;
  public static final int Data = 17;
  public static final int DataCountSection = 18;
  public static final int DataDrop = 19;
  public static final int DataIdx = 20;
  public static final int DataSection = 21;
  public static final int DeclarativeElem = 22;
  public static final int DeclarativeExprsElem = 23;
  public static final int Drop = 24;
  public static final int Elem = 25;
  public static final int ElemActiveExpr = 26;
  public static final int ElemDrop = 27;
  public static final int ElemIdx = 28;
  public static final int ElemSection = 29;
  public static final int EmptyBlockType = 30;
  public static final int EmptyInstruction = 31;
  public static final int Export = 32;
  public static final int ExportDesc = 33;
  public static final int ExportSection = 34;
  public static final int Expr = 35;
  public static final int F32Abs = 36;
  public static final int F32Add = 37;
  public static final int F32Ceil = 38;
  public static final int F32Const = 39;
  public static final int F32ConvertI32S = 40;
  public static final int F32ConvertI32U = 41;
  public static final int F32ConvertI64S = 42;
  public static final int F32ConvertI64U = 43;
  public static final int F32Copysign = 44;
  public static final int F32DemoteF64 = 45;
  public static final int F32Div = 46;
  public static final int F32Eq = 47;
  public static final int F32Floor = 48;
  public static final int F32Ge = 49;
  public static final int F32Gt = 50;
  public static final int F32Le = 51;
  public static final int F32Load = 52;
  public static final int F32Lt = 53;
  public static final int F32Max = 54;
  public static final int F32Min = 55;
  public static final int F32Mul = 56;
  public static final int F32Ne = 57;
  public static final int F32Nearest = 58;
  public static final int F32Neg = 59;
  public static final int F32ReinterpretI32 = 60;
  public static final int F32Sqrt = 61;
  public static final int F32Store = 62;
  public static final int F32Sub = 63;
  public static final int F32Trunc = 64;
  public static final int F32x4Abs = 65;
  public static final int F32x4Add = 66;
  public static final int F32x4Ceil = 67;
  public static final int F32x4ConvertI32x4S = 68;
  public static final int F32x4ConvertI32x4U = 69;
  public static final int F32x4DemoteF64x2Zero = 70;
  public static final int F32x4Div = 71;
  public static final int F32x4Eq = 72;
  public static final int F32x4ExtractLane = 73;
  public static final int F32x4Floor = 74;
  public static final int F32x4Ge = 75;
  public static final int F32x4Gt = 76;
  public static final int F32x4Le = 77;
  public static final int F32x4Lt = 78;
  public static final int F32x4Max = 79;
  public static final int F32x4Min = 80;
  public static final int F32x4Mul = 81;
  public static final int F32x4Ne = 82;
  public static final int F32x4Nearest = 83;
  public static final int F32x4Neg = 84;
  public static final int F32x4Pmax = 85;
  public static final int F32x4Pmin = 86;
  public static final int F32x4ReplaceLane = 87;
  public static final int F32x4Splat = 88;
  public static final int F32x4Sqrt = 89;
  public static final int F32x4Sub = 90;
  public static final int F32x4Trunc = 91;
  public static final int F64Abs = 92;
  public static final int F64Add = 93;
  public static final int F64Ceil = 94;
  public static final int F64Const = 95;
  public static final int F64ConvertI32S = 96;
  public static final int F64ConvertI32U = 97;
  public static final int F64ConvertI64S = 98;
  public static final int F64ConvertI64U = 99;
  public static final int F64Copysign = 100;
  public static final int F64Div = 101;
  public static final int F64Eq = 102;
  public static final int F64Floor = 103;
  public static final int F64Ge = 104;
  public static final int F64Gt = 105;
  public static final int F64Le = 106;
  public static final int F64Load = 107;
  public static final int F64Lt = 108;
  public static final int F64Max = 109;
  public static final int F64Min = 110;
  public static final int F64Mul = 111;
  public static final int F64Ne = 112;
  public static final int F64Nearest = 113;
  public static final int F64Neg = 114;
  public static final int F64PromoteF32 = 115;
  public static final int F64ReinterpretI64 = 116;
  public static final int F64Sqrt = 117;
  public static final int F64Store = 118;
  public static final int F64Sub = 119;
  public static final int F64Trunc = 120;
  public static final int F64x2Abs = 121;
  public static final int F64x2Add = 122;
  public static final int F64x2Ceil = 123;
  public static final int F64x2ConvertLowI32x4S = 124;
  public static final int F64x2ConvertLowI32x4U = 125;
  public static final int F64x2Div = 126;
  public static final int F64x2Eq = 127;
  public static final int F64x2ExtractLane = 128;
  public static final int F64x2Floor = 129;
  public static final int F64x2Ge = 130;
  public static final int F64x2Gt = 131;
  public static final int F64x2Le = 132;
  public static final int F64x2Lt = 133;
  public static final int F64x2Max = 134;
  public static final int F64x2Min = 135;
  public static final int F64x2Mul = 136;
  public static final int F64x2Ne = 137;
  public static final int F64x2Nearest = 138;
  public static final int F64x2Neg = 139;
  public static final int F64x2Pmax = 140;
  public static final int F64x2Pmin = 141;
  public static final int F64x2PromoteLowF32x4 = 142;
  public static final int F64x2ReplaceLane = 143;
  public static final int F64x2Splat = 144;
  public static final int F64x2Sqrt = 145;
  public static final int F64x2Sub = 146;
  public static final int F64x2Trunc = 147;
  public static final int Func = 148;
  public static final int FuncExport = 149;
  public static final int FuncIdx = 150;
  public static final int FuncSection = 151;
  public static final int FuncType = 152;
  public static final int Global = 153;
  public static final int GlobalExport = 154;
  public static final int GlobalGet = 155;
  public static final int GlobalIdx = 156;
  public static final int GlobalSection = 157;
  public static final int GlobalSet = 158;
  public static final int GlobalType = 159;
  public static final int I16x8Abs = 160;
  public static final int I16x8Add = 161;
  public static final int I16x8AddSatS = 162;
  public static final int I16x8AddSatU = 163;
  public static final int I16x8AllTrue = 164;
  public static final int I16x8AvgrU = 165;
  public static final int I16x8Bitmask = 166;
  public static final int I16x8Eq = 167;
  public static final int I16x8ExtaddPairwiseI8x16S = 168;
  public static final int I16x8ExtaddPairwiseI8x16U = 169;
  public static final int I16x8ExtendHighI8x16S = 170;
  public static final int I16x8ExtendHighI8x16U = 171;
  public static final int I16x8ExtendLowI8x16S = 172;
  public static final int I16x8ExtendLowI8x16U = 173;
  public static final int I16x8ExtmulHighI8x16S = 174;
  public static final int I16x8ExtmulHighI8x16U = 175;
  public static final int I16x8ExtmulLowI8x16S = 176;
  public static final int I16x8ExtmulLowI8x16U = 177;
  public static final int I16x8ExtractLaneS = 178;
  public static final int I16x8ExtractLaneU = 179;
  public static final int I16x8GeS = 180;
  public static final int I16x8GeU = 181;
  public static final int I16x8GtS = 182;
  public static final int I16x8GtU = 183;
  public static final int I16x8LeS = 184;
  public static final int I16x8LeU = 185;
  public static final int I16x8LtS = 186;
  public static final int I16x8LtU = 187;
  public static final int I16x8MaxS = 188;
  public static final int I16x8MaxU = 189;
  public static final int I16x8MinS = 190;
  public static final int I16x8MinU = 191;
  public static final int I16x8Mul = 192;
  public static final int I16x8NarrowI32x4S = 193;
  public static final int I16x8NarrowI32x4U = 194;
  public static final int I16x8Ne = 195;
  public static final int I16x8Neg = 196;
  public static final int I16x8Q15mulrSatS = 197;
  public static final int I16x8ReplaceLane = 198;
  public static final int I16x8Shl = 199;
  public static final int I16x8ShrS = 200;
  public static final int I16x8ShrU = 201;
  public static final int I16x8Splat = 202;
  public static final int I16x8Sub = 203;
  public static final int I16x8SubSatS = 204;
  public static final int I16x8SubSatU = 205;
  public static final int I32Add = 206;
  public static final int I32And = 207;
  public static final int I32Clz = 208;
  public static final int I32Const = 209;
  public static final int I32Ctz = 210;
  public static final int I32DivS = 211;
  public static final int I32DivU = 212;
  public static final int I32Eq = 213;
  public static final int I32Eqz = 214;
  public static final int I32Extend16S = 215;
  public static final int I32Extend8S = 216;
  public static final int I32GeS = 217;
  public static final int I32GeU = 218;
  public static final int I32GtS = 219;
  public static final int I32GtU = 220;
  public static final int I32LeS = 221;
  public static final int I32LeU = 222;
  public static final int I32Load = 223;
  public static final int I32Load16S = 224;
  public static final int I32Load16U = 225;
  public static final int I32Load8S = 226;
  public static final int I32Load8U = 227;
  public static final int I32LtS = 228;
  public static final int I32LtU = 229;
  public static final int I32Mul = 230;
  public static final int I32Ne = 231;
  public static final int I32Or = 232;
  public static final int I32Popcnt = 233;
  public static final int I32ReinterpretF32 = 234;
  public static final int I32RemS = 235;
  public static final int I32RemU = 236;
  public static final int I32Rotl = 237;
  public static final int I32Rotr = 238;
  public static final int I32Shl = 239;
  public static final int I32ShrS = 240;
  public static final int I32ShrU = 241;
  public static final int I32Store = 242;
  public static final int I32Store16 = 243;
  public static final int I32Store8 = 244;
  public static final int I32Sub = 245;
  public static final int I32TruncF32S = 246;
  public static final int I32TruncF32U = 247;
  public static final int I32TruncF64S = 248;
  public static final int I32TruncF64U = 249;
  public static final int I32TruncSatF32S = 250;
  public static final int I32TruncSatF32U = 251;
  public static final int I32TruncSatF64S = 252;
  public static final int I32TruncSatF64U = 253;
  public static final int I32WrapI64 = 254;
  public static final int I32Xor = 255;
  public static final int I32x4Abs = 256;
  public static final int I32x4Add = 257;
  public static final int I32x4AllTrue = 258;
  public static final int I32x4Bitmask = 259;
  public static final int I32x4DotI16x8S = 260;
  public static final int I32x4Eq = 261;
  public static final int I32x4ExtaddPairwiseI16x8S = 262;
  public static final int I32x4ExtaddPairwiseI16x8U = 263;
  public static final int I32x4ExtendHighI16x8S = 264;
  public static final int I32x4ExtendHighI16x8U = 265;
  public static final int I32x4ExtendLowI16x8S = 266;
  public static final int I32x4ExtendLowI16x8U = 267;
  public static final int I32x4ExtmulHighI16x8S = 268;
  public static final int I32x4ExtmulHighI16x8U = 269;
  public static final int I32x4ExtmulLowI16x8S = 270;
  public static final int I32x4ExtmulLowI16x8U = 271;
  public static final int I32x4ExtractLane = 272;
  public static final int I32x4GeS = 273;
  public static final int I32x4GeU = 274;
  public static final int I32x4GtS = 275;
  public static final int I32x4GtU = 276;
  public static final int I32x4LeS = 277;
  public static final int I32x4LeU = 278;
  public static final int I32x4LtS = 279;
  public static final int I32x4LtU = 280;
  public static final int I32x4MaxS = 281;
  public static final int I32x4MaxU = 282;
  public static final int I32x4MinS = 283;
  public static final int I32x4MinU = 284;
  public static final int I32x4Mul = 285;
  public static final int I32x4Ne = 286;
  public static final int I32x4Neg = 287;
  public static final int I32x4ReplaceLane = 288;
  public static final int I32x4Shl = 289;
  public static final int I32x4ShrS = 290;
  public static final int I32x4ShrU = 291;
  public static final int I32x4Splat = 292;
  public static final int I32x4Sub = 293;
  public static final int I32x4TruncSatF32x4S = 294;
  public static final int I32x4TruncSatF32x4U = 295;
  public static final int I32x4TruncSatF64x2SZero = 296;
  public static final int I64Add = 297;
  public static final int I64And = 298;
  public static final int I64Clz = 299;
  public static final int I64Const = 300;
  public static final int I64Ctz = 301;
  public static final int I64DivS = 302;
  public static final int I64DivU = 303;
  public static final int I64Eq = 304;
  public static final int I64Eqz = 305;
  public static final int I64Extend16S = 306;
  public static final int I64Extend32S = 307;
  public static final int I64Extend8S = 308;
  public static final int I64ExtendI32S = 309;
  public static final int I64ExtendI32U = 310;
  public static final int I64GeS = 311;
  public static final int I64GeU = 312;
  public static final int I64GtS = 313;
  public static final int I64GtU = 314;
  public static final int I64LeS = 315;
  public static final int I64LeU = 316;
  public static final int I64Load = 317;
  public static final int I64Load16S = 318;
  public static final int I64Load16U = 319;
  public static final int I64Load32S = 320;
  public static final int I64Load32U = 321;
  public static final int I64Load8S = 322;
  public static final int I64Load8U = 323;
  public static final int I64LtS = 324;
  public static final int I64LtU = 325;
  public static final int I64Mul = 326;
  public static final int I64Ne = 327;
  public static final int I64Or = 328;
  public static final int I64Popcnt = 329;
  public static final int I64ReinterpretF64 = 330;
  public static final int I64RemS = 331;
  public static final int I64RemU = 332;
  public static final int I64Rotl = 333;
  public static final int I64Rotr = 334;
  public static final int I64Shl = 335;
  public static final int I64ShrS = 336;
  public static final int I64ShrU = 337;
  public static final int I64Store = 338;
  public static final int I64Store16 = 339;
  public static final int I64Store32 = 340;
  public static final int I64Store8 = 341;
  public static final int I64Sub = 342;
  public static final int I64TruncF32S = 343;
  public static final int I64TruncF32U = 344;
  public static final int I64TruncF64S = 345;
  public static final int I64TruncF64U = 346;
  public static final int I64TruncSatF32S = 347;
  public static final int I64TruncSatF32U = 348;
  public static final int I64TruncSatF64S = 349;
  public static final int I64TruncSatF64U = 350;
  public static final int I64Xor = 351;
  public static final int I64x2Abs = 352;
  public static final int I64x2Add = 353;
  public static final int I64x2AllTrue = 354;
  public static final int I64x2Bitmask = 355;
  public static final int I64x2Eq = 356;
  public static final int I64x2ExtendHighI32x4S = 357;
  public static final int I64x2ExtendHighI32x4U = 358;
  public static final int I64x2ExtendLowI32x4S = 359;
  public static final int I64x2ExtendLowI32x4U = 360;
  public static final int I64x2ExtmulHighI32x4S = 361;
  public static final int I64x2ExtmulHighI32x4U = 362;
  public static final int I64x2ExtmulLowI32x4S = 363;
  public static final int I64x2ExtmulLowI32x4U = 364;
  public static final int I64x2ExtractLane = 365;
  public static final int I64x2GeS = 366;
  public static final int I64x2GtS = 367;
  public static final int I64x2LeS = 368;
  public static final int I64x2LtS = 369;
  public static final int I64x2Mul = 370;
  public static final int I64x2Ne = 371;
  public static final int I64x2Neg = 372;
  public static final int I64x2ReplaceLane = 373;
  public static final int I64x2Shl = 374;
  public static final int I64x2ShrS = 375;
  public static final int I64x2ShrU = 376;
  public static final int I64x2Splat = 377;
  public static final int I64x2Sub = 378;
  public static final int I8x16Abs = 379;
  public static final int I8x16Add = 380;
  public static final int I8x16AddSatS = 381;
  public static final int I8x16AddSatU = 382;
  public static final int I8x16AllTrue = 383;
  public static final int I8x16AvgrU = 384;
  public static final int I8x16Bitmask = 385;
  public static final int I8x16Eq = 386;
  public static final int I8x16ExtractLaneS = 387;
  public static final int I8x16ExtractLaneU = 388;
  public static final int I8x16GeS = 389;
  public static final int I8x16GeU = 390;
  public static final int I8x16GtS = 391;
  public static final int I8x16GtU = 392;
  public static final int I8x16LeS = 393;
  public static final int I8x16LeU = 394;
  public static final int I8x16LtS = 395;
  public static final int I8x16LtU = 396;
  public static final int I8x16MaxS = 397;
  public static final int I8x16MaxU = 398;
  public static final int I8x16MinS = 399;
  public static final int I8x16MinU = 400;
  public static final int I8x16NarrowI16x8S = 401;
  public static final int I8x16NarrowI16x8U = 402;
  public static final int I8x16Ne = 403;
  public static final int I8x16Neg = 404;
  public static final int I8x16Popcnt = 405;
  public static final int I8x16ReplaceLane = 406;
  public static final int I8x16Shl = 407;
  public static final int I8x16ShrS = 408;
  public static final int I8x16ShrU = 409;
  public static final int I8x16Shuffle = 410;
  public static final int I8x16Splat = 411;
  public static final int I8x16Sub = 412;
  public static final int I8x16SubSatS = 413;
  public static final int I8x16SubSatU = 414;
  public static final int I8x16Swizzle = 415;
  public static final int If = 416;
  public static final int IfElse = 417;
  public static final int Import = 418;
  public static final int ImportDesc = 419;
  public static final int ImportFuncDesc = 420;
  public static final int ImportGlobalDesc = 421;
  public static final int ImportMemDesc = 422;
  public static final int ImportSection = 423;
  public static final int ImportTableDesc = 424;
  public static final int Index = 425;
  public static final int Instr = 426;
  public static final int InstructionList = 427;
  public static final int LabelIdx = 428;
  public static final int LaneIdx = 429;
  public static final int Limits = 430;
  public static final int LocalGet = 431;
  public static final int LocalIdx = 432;
  public static final int LocalSet = 433;
  public static final int LocalTee = 434;
  public static final int Locals = 435;
  public static final int Loop = 436;
  public static final int Mem = 437;
  public static final int MemArg = 438;
  public static final int MemExport = 439;
  public static final int MemIdx = 440;
  public static final int MemSection = 441;
  public static final int MemType = 442;
  public static final int MemoryCopy = 443;
  public static final int MemoryFill = 444;
  public static final int MemoryGrow = 445;
  public static final int MemoryInit = 446;
  public static final int MemorySize = 447;
  public static final int Module = 448;
  public static final int ModuleSection = 449;
  public static final int Nop = 450;
  public static final int NumType = 451;
  public static final int PassiveData = 452;
  public static final int PassiveElem = 453;
  public static final int PassiveExprsElem = 454;
  public static final int PlainVectorInstr = 455;
  public static final int RefFunc = 456;
  public static final int RefIsNull = 457;
  public static final int RefNull = 458;
  public static final int RefType = 459;
  public static final int ResultType = 460;
  public static final int Return = 461;
  public static final int Select = 462;
  public static final int SelectTypes = 463;
  public static final int StartSection = 464;
  public static final int Table = 465;
  public static final int TableCopy = 466;
  public static final int TableExport = 467;
  public static final int TableFill = 468;
  public static final int TableGet = 469;
  public static final int TableGrow = 470;
  public static final int TableIdx = 471;
  public static final int TableInit = 472;
  public static final int TableSection = 473;
  public static final int TableSet = 474;
  public static final int TableSize = 475;
  public static final int TableType = 476;
  public static final int TypeIdx = 477;
  public static final int TypeIdxBlockType = 478;
  public static final int TypeSection = 479;
  public static final int U32Val = 480;
  public static final int Unreachable = 481;
  public static final int V128And = 482;
  public static final int V128AndNot = 483;
  public static final int V128AnyTrue = 484;
  public static final int V128Bitselect = 485;
  public static final int V128Const = 486;
  public static final int V128Load = 487;
  public static final int V128Load16Lane = 488;
  public static final int V128Load16Splat = 489;
  public static final int V128Load16x4S = 490;
  public static final int V128Load16x4U = 491;
  public static final int V128Load32Lane = 492;
  public static final int V128Load32Splat = 493;
  public static final int V128Load32Zero = 494;
  public static final int V128Load32x2S = 495;
  public static final int V128Load32x2U = 496;
  public static final int V128Load64Lane = 497;
  public static final int V128Load64Splat = 498;
  public static final int V128Load64Zero = 499;
  public static final int V128Load8Lane = 500;
  public static final int V128Load8Splat = 501;
  public static final int V128Load8x8S = 502;
  public static final int V128Load8x8U = 503;
  public static final int V128Not = 504;
  public static final int V128Or = 505;
  public static final int V128Store = 506;
  public static final int V128Store16Lane = 507;
  public static final int V128Store32Lane = 508;
  public static final int V128Store64Lane = 509;
  public static final int V128Store8Lane = 510;
  public static final int V128Xor = 511;
  public static final int ValBlockType = 512;
  public static final int ValTypeContainer = 513;
  public static final int VecType = 514;
  public static final int i32x4TruncSatF64x2UZero = 515;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL);
    builder.put(0x39e7fc40f7b602cdL, ActiveData);
    builder.put(0x39e7fc40f7e0958bL, ActiveElem);
    builder.put(0x39e7fc40f7e417b6L, ActiveExplicitElem);
    builder.put(0x39e7fc40f7e654ccL, ActiveExplicitExprsElem);
    builder.put(0x39e7fc40f7e5a290L, ActiveExprsElem);
    builder.put(0x39e7fc40f7bb7253L, ActiveIndexedData);
    builder.put(0x39e7fc40f584de34L, Block);
    builder.put(0x39e7fc40f5841ec2L, BlockType);
    builder.put(0x39e7fc40f63ae4a4L, Br);
    builder.put(0x39e7fc40f63b707aL, BrIf);
    builder.put(0x39e7fc40f63b938fL, BrTable);
    builder.put(0x601bfff8edabd3faL, ByteSized);
    builder.put(0x39e7fc40f6467101L, Call);
    builder.put(0x39e7fc40f6470636L, CallIndirect);
    builder.put(0x39e7fc40f545b99aL, Code);
    builder.put(0x39e7fc40f5469decL, CodeSection);
    builder.put(0x601bfff8ed8786cbL, CustomSection);
    builder.put(0x39e7fc40f7b602adL, Data);
    builder.put(0x39e7fc40f7df5d8dL, DataCountSection);
    builder.put(0x39e7fc40f6833971L, DataDrop);
    builder.put(0x39e7fc40f6816646L, DataIdx);
    builder.put(0x39e7fc40f7b6024fL, DataSection);
    builder.put(0x39e7fc40f7e57b82L, DeclarativeElem);
    builder.put(0x39e7fc40f7e78cacL, DeclarativeExprsElem);
    builder.put(0x39e7fc40f6500930L, Drop);
    builder.put(0x39e7fc40f54c3c34L, Elem);
    builder.put(0x39e7fc40f552309eL, ElemActiveExpr);
    builder.put(0x39e7fc40f66deb69L, ElemDrop);
    builder.put(0x39e7fc40f66bd1daL, ElemIdx);
    builder.put(0x39e7fc40f54c3c54L, ElemSection);
    builder.put(0x39e7fc40f5841ec5L, EmptyBlockType);
    builder.put(0x39e7fc40f4f6eb8cL, EmptyInstruction);
    builder.put(0x39e7fc40f52af1bfL, Export);
    builder.put(0x39e7fc40f52af1c2L, ExportDesc);
    builder.put(0x39e7fc40f52af1beL, ExportSection);
    builder.put(0x39e7fc40f4f6eb37L, Expr);
    builder.put(0x39e7fc40f6a5ae39L, F32Abs);
    builder.put(0x39e7fc40f6a5d3c5L, F32Add);
    builder.put(0x39e7fc40f6a5b62dL, F32Ceil);
    builder.put(0x39e7fc40f50cd7bcL, F32Const);
    builder.put(0x39e7fc40f6a6a918L, F32ConvertI32S);
    builder.put(0x39e7fc40f6a6b03dL, F32ConvertI32U);
    builder.put(0x39e7fc40f6a6b762L, F32ConvertI64S);
    builder.put(0x39e7fc40f6a6bb5fL, F32ConvertI64U);
    builder.put(0x39e7fc40f6a5fbdfL, F32Copysign);
    builder.put(0x39e7fc40f6a6c284L, F32DemoteF64);
    builder.put(0x39e7fc40f6a5e603L, F32Div);
    builder.put(0x39e7fc40f68f4c3cL, F32Eq);
    builder.put(0x39e7fc40f6a5bd4fL, F32Floor);
    builder.put(0x39e7fc40f68f509aL, F32Ge);
    builder.put(0x39e7fc40f68f4ed8L, F32Gt);
    builder.put(0x39e7fc40f68f4f93L, F32Le);
    builder.put(0x39e7fc40f66ff4fdL, F32Load);
    builder.put(0x39e7fc40f68f4e1dL, F32Lt);
    builder.put(0x39e7fc40f6a5f487L, F32Max);
    builder.put(0x39e7fc40f6a5e9fdL, F32Min);
    builder.put(0x39e7fc40f6a5e209L, F32Mul);
    builder.put(0x39e7fc40f68f4d2bL, F32Ne);
    builder.put(0x39e7fc40f6a5c86bL, F32Nearest);
    builder.put(0x39e7fc40f6a5b233L, F32Neg);
    builder.put(0x39e7fc40f6a6f597L, F32ReinterpretI32);
    builder.put(0x39e7fc40f6a5cf8dL, F32Sqrt);
    builder.put(0x39e7fc40f680662cL, F32Store);
    builder.put(0x39e7fc40f6a5dae7L, F32Sub);
    builder.put(0x39e7fc40f6a5c149L, F32Trunc);
    builder.put(0x39e7fc40f75962fcL, F32x4Abs);
    builder.put(0x39e7fc40f75995b5L, F32x4Add);
    builder.put(0x39e7fc40f7592567L, F32x4Ceil);
    builder.put(0x39e7fc40f796681bL, F32x4ConvertI32x4S);
    builder.put(0x39e7fc40f796738dL, F32x4ConvertI32x4U);
    builder.put(0x39e7fc40f796bbe3L, F32x4DemoteF64x2Zero);
    builder.put(0x39e7fc40f759bc61L, F32x4Div);
    builder.put(0x39e7fc40f737b8dbL, F32x4Eq);
    builder.put(0x39e7fc40f722500cL, F32x4ExtractLane);
    builder.put(0x39e7fc40f7593c08L, F32x4Floor);
    builder.put(0x39e7fc40f73806a0L, F32x4Ge);
    builder.put(0x39e7fc40f737df87L, F32x4Gt);
    builder.put(0x39e7fc40f737ef3fL, F32x4Le);
    builder.put(0x39e7fc40f737cfcfL, F32x4Lt);
    builder.put(0x39e7fc40f759d5b0L, F32x4Max);
    builder.put(0x39e7fc40f759cd6cL, F32x4Min);
    builder.put(0x39e7fc40f759aca7L, F32x4Mul);
    builder.put(0x39e7fc40f737c456L, F32x4Ne);
    builder.put(0x39e7fc40f7595b37L, F32x4Nearest);
    builder.put(0x39e7fc40f75975e8L, F32x4Neg);
    builder.put(0x39e7fc40f759f518L, F32x4Pmax);
    builder.put(0x39e7fc40f759e56aL, F32x4Pmin);
    builder.put(0x39e7fc40f722663bL, F32x4ReplaceLane);
    builder.put(0x39e7fc40f735915cL, F32x4Splat);
    builder.put(0x39e7fc40f75985a9L, F32x4Sqrt);
    builder.put(0x39e7fc40f759a12eL, F32x4Sub);
    builder.put(0x39e7fc40f7594bb6L, F32x4Trunc);
    builder.put(0x39e7fc40f6a60301L, F64Abs);
    builder.put(0x39e7fc40f6a62fa3L, F64Add);
    builder.put(0x39e7fc40f6a61145L, F64Ceil);
    builder.put(0x39e7fc40f514690eL, F64Const);
    builder.put(0x39e7fc40f6a6c9a9L, F64ConvertI32S);
    builder.put(0x39e7fc40f6a6cda6L, F64ConvertI32U);
    builder.put(0x39e7fc40f6a6d4cbL, F64ConvertI64S);
    builder.put(0x39e7fc40f6a6dbf0L, F64ConvertI64U);
    builder.put(0x39e7fc40f6a65ab0L, F64Copysign);
    builder.put(0x39e7fc40f6a6454aL, F64Div);
    builder.put(0x39e7fc40f69a3ac9L, F64Eq);
    builder.put(0x39e7fc40f6a61be7L, F64Floor);
    builder.put(0x39e7fc40f69a3eb3L, F64Ge);
    builder.put(0x39e7fc40f69a3d3dL, F64Gt);
    builder.put(0x39e7fc40f69a3df8L, F64Le);
    builder.put(0x39e7fc40f66ffef7L, F64Load);
    builder.put(0x39e7fc40f69a3c7bL, F64Lt);
    builder.put(0x39e7fc40f6a6538eL, F64Max);
    builder.put(0x39e7fc40f6a64c6cL, F64Min);
    builder.put(0x39e7fc40f6a63deaL, F64Mul);
    builder.put(0x39e7fc40f69a3bb8L, F64Ne);
    builder.put(0x39e7fc40f6a6244cL, F64Nearest);
    builder.put(0x39e7fc40f6a60a23L, F64Neg);
    builder.put(0x39e7fc40f6a6e315L, F64PromoteF32);
    builder.put(0x39e7fc40f6a6fcbcL, F64ReinterpretI64);
    builder.put(0x39e7fc40f6a62ba9L, F64Sqrt);
    builder.put(0x39e7fc40f6807f9aL, F64Store);
    builder.put(0x39e7fc40f6a636c5L, F64Sub);
    builder.put(0x39e7fc40f6a62017L, F64Trunc);
    builder.put(0x39e7fc40f77762b3L, F64x2Abs);
    builder.put(0x39e7fc40f7778616L, F64x2Add);
    builder.put(0x39e7fc40f7773594L, F64x2Ceil);
    builder.put(0x39e7fc40f796a0b2L, F64x2ConvertLowI32x4S);
    builder.put(0x39e7fc40f796b06aL, F64x2ConvertLowI32x4U);
    builder.put(0x39e7fc40f777af37L, F64x2Div);
    builder.put(0x39e7fc40f7380e6bL, F64x2Eq);
    builder.put(0x39e7fc40f7228b95L, F64x2ExtractLane);
    builder.put(0x39e7fc40f7774310L, F64x2Floor);
    builder.put(0x39e7fc40f7384498L, F64x2Ge);
    builder.put(0x39e7fc40f7382d18L, F64x2Gt);
    builder.put(0x39e7fc40f738391fL, F64x2Le);
    builder.put(0x39e7fc40f738219fL, F64x2Lt);
    builder.put(0x39e7fc40f777c67dL, F64x2Max);
    builder.put(0x39e7fc40f777bb04L, F64x2Min);
    builder.put(0x39e7fc40f777a3beL, F64x2Mul);
    builder.put(0x39e7fc40f7381626L, F64x2Ne);
    builder.put(0x39e7fc40f7775738L, F64x2Nearest);
    builder.put(0x39e7fc40f7776f22L, F64x2Neg);
    builder.put(0x39e7fc40f777e202L, F64x2Pmax);
    builder.put(0x39e7fc40f777d635L, F64x2Pmin);
    builder.put(0x39e7fc40f796d09cL, F64x2PromoteLowF32x4);
    builder.put(0x39e7fc40f722a685L, F64x2ReplaceLane);
    builder.put(0x39e7fc40f7359d28L, F64x2Splat);
    builder.put(0x39e7fc40f7777a9bL, F64x2Sqrt);
    builder.put(0x39e7fc40f7779845L, F64x2Sub);
    builder.put(0x39e7fc40f7774acbL, F64x2Trunc);
    builder.put(0x39e7fc40f543f0f3L, Func);
    builder.put(0x39e7fc40f52af248L, FuncExport);
    builder.put(0x39e7fc40f52b227aL, FuncIdx);
    builder.put(0x6f2b0ba032793cf6L, FuncSection);
    builder.put(0x601bfff8ed828ebaL, FuncType);
    builder.put(0x39e7fc40f4f6eb2bL, Global);
    builder.put(0x39e7fc40f52bd112L, GlobalExport);
    builder.put(0x39e7fc40f662f7a9L, GlobalGet);
    builder.put(0x39e7fc40f52b29d2L, GlobalIdx);
    builder.put(0x39e7fc40f4f6eb2aL, GlobalSection);
    builder.put(0x39e7fc40f6631f00L, GlobalSet);
    builder.put(0x601bfff8ed829441L, GlobalType);
    builder.put(0x39e7fc40f739fec6L, I16x8Abs);
    builder.put(0x39e7fc40f73ab94aL, I16x8Add);
    builder.put(0x39e7fc40f73ac902L, I16x8AddSatS);
    builder.put(0x39e7fc40f73ad8baL, I16x8AddSatU);
    builder.put(0x39e7fc40f73a2aa3L, I16x8AllTrue);
    builder.put(0x39e7fc40f73b5996L, I16x8AvgrU);
    builder.put(0x39e7fc40f73a361cL, I16x8Bitmask);
    builder.put(0x39e7fc40f7362cc3L, I16x8Eq);
    builder.put(0x39e7fc40f739e395L, I16x8ExtaddPairwiseI8x16S);
    builder.put(0x39e7fc40f739ef0eL, I16x8ExtaddPairwiseI8x16U);
    builder.put(0x39e7fc40f73a683fL, I16x8ExtendHighI8x16S);
    builder.put(0x39e7fc40f73a7f31L, I16x8ExtendHighI8x16U);
    builder.put(0x39e7fc40f73a5cc6L, I16x8ExtendLowI8x16S);
    builder.put(0x39e7fc40f73a73b8L, I16x8ExtendLowI8x16U);
    builder.put(0x39e7fc40f73b7ef4L, I16x8ExtmulHighI8x16S);
    builder.put(0x39e7fc40f73b9d00L, I16x8ExtmulHighI8x16U);
    builder.put(0x39e7fc40f73b72f0L, I16x8ExtmulLowI8x16S);
    builder.put(0x39e7fc40f73b8a87L, I16x8ExtmulLowI8x16U);
    builder.put(0x39e7fc40f72127a6L, I16x8ExtractLaneS);
    builder.put(0x39e7fc40f721a652L, I16x8ExtractLaneU);
    builder.put(0x39e7fc40f7369f34L, I16x8GeS);
    builder.put(0x39e7fc40f736aeecL, I16x8GeU);
    builder.put(0x39e7fc40f7366325L, I16x8GtS);
    builder.put(0x39e7fc40f73672ddL, I16x8GtU);
    builder.put(0x39e7fc40f7368403L, I16x8LeS);
    builder.put(0x39e7fc40f7368f7cL, I16x8LeU);
    builder.put(0x39e7fc40f7364c33L, I16x8LtS);
    builder.put(0x39e7fc40f73657acL, I16x8LtU);
    builder.put(0x39e7fc40f73b419cL, I16x8MaxS);
    builder.put(0x39e7fc40f73b4e27L, I16x8MaxU);
    builder.put(0x39e7fc40f73b266bL, I16x8MinS);
    builder.put(0x39e7fc40f73b31e4L, I16x8MinU);
    builder.put(0x39e7fc40f73b103eL, I16x8Mul);
    builder.put(0x39e7fc40f73a4195L, I16x8NarrowI32x4S);
    builder.put(0x39e7fc40f73a4d0eL, I16x8NarrowI32x4U);
    builder.put(0x39e7fc40f7363c7bL, I16x8Ne);
    builder.put(0x39e7fc40f73a0b31L, I16x8Neg);
    builder.put(0x39e7fc40f73a1ae9L, I16x8Q15mulrSatS);
    builder.put(0x39e7fc40f721c11eL, I16x8ReplaceLane);
    builder.put(0x39e7fc40f73a9895L, I16x8Shl);
    builder.put(0x39e7fc40f73aa162L, I16x8ShrS);
    builder.put(0x39e7fc40f73aacddL, I16x8ShrU);
    builder.put(0x39e7fc40f7356968L, I16x8Splat);
    builder.put(0x39e7fc40f73ae545L, I16x8Sub);
    builder.put(0x39e7fc40f73af4f3L, I16x8SubSatS);
    builder.put(0x39e7fc40f73b04c5L, I16x8SubSatU);
    builder.put(0x39e7fc40f69a41a2L, I32Add);
    builder.put(0x39e7fc40f69a4792L, I32And);
    builder.put(0x39e7fc40f69a3f6eL, I32Clz);
    builder.put(0x39e7fc40f506bb60L, I32Const);
    builder.put(0x39e7fc40f69a4029L, I32Ctz);
    builder.put(0x39e7fc40f69a443eL, I32DivS);
    builder.put(0x39e7fc40f69a452dL, I32DivU);
    builder.put(0x39e7fc40f68f25dcL, I32Eq);
    builder.put(0x39e7fc40f68f1f56L, I32Eqz);
    builder.put(0x39e7fc40f6a7089dL, I32Extend16S);
    builder.put(0x39e7fc40f6a704a3L, I32Extend8S);
    builder.put(0x39e7fc40f68f328eL, I32GeS);
    builder.put(0x39e7fc40f68f35bbL, I32GeU);
    builder.put(0x39e7fc40f68f29d2L, I32GtS);
    builder.put(0x39e7fc40f68f2ac1L, I32GtU);
    builder.put(0x39e7fc40f68f2bb0L, I32LeS);
    builder.put(0x39e7fc40f68f2f64L, I32LeU);
    builder.put(0x39e7fc40f66f614bL, I32Load);
    builder.put(0x39e7fc40f670de58L, I32Load16S);
    builder.put(0x39e7fc40f670faf9L, I32Load16U);
    builder.put(0x39e7fc40f670826bL, I32Load8S);
    builder.put(0x39e7fc40f670c9d1L, I32Load8U);
    builder.put(0x39e7fc40f68f285cL, I32LtS);
    builder.put(0x39e7fc40f68f2917L, I32LtU);
    builder.put(0x39e7fc40f69a434fL, I32Mul);
    builder.put(0x39e7fc40f68f2697L, I32Ne);
    builder.put(0x39e7fc40f69a484dL, I32Or);
    builder.put(0x39e7fc40f69a40e4L, I32Popcnt);
    builder.put(0x39e7fc40f6a6e712L, I32ReinterpretF32);
    builder.put(0x39e7fc40f69a45e8L, I32RemS);
    builder.put(0x39e7fc40f69a46a3L, I32RemU);
    builder.put(0x39e7fc40f69a4c01L, I32Rotl);
    builder.put(0x39e7fc40f69a4cbcL, I32Rotr);
    builder.put(0x39e7fc40f69a49c6L, I32Shl);
    builder.put(0x39e7fc40f69a4a88L, I32ShrS);
    builder.put(0x39e7fc40f69a4b46L, I32ShrU);
    builder.put(0x39e7fc40f6803d19L, I32Store);
    builder.put(0x39e7fc40f680c90eL, I32Store16);
    builder.put(0x39e7fc40f680b0a6L, I32Store8);
    builder.put(0x39e7fc40f69a425dL, I32Sub);
    builder.put(0x39e7fc40f6a668f4L, I32TruncF32S);
    builder.put(0x39e7fc40f6a67016L, I32TruncF32U);
    builder.put(0x39e7fc40f6a67410L, I32TruncF64S);
    builder.put(0x39e7fc40f6a6780dL, I32TruncF64U);
    builder.put(0x39e7fc40f6b4c6cbL, I32TruncSatF32S);
    builder.put(0x39e7fc40f6b563eeL, I32TruncSatF32U);
    builder.put(0x39e7fc40f6b5798dL, I32TruncSatF64S);
    builder.put(0x39e7fc40f6b59178L, I32TruncSatF64U);
    builder.put(0x39e7fc40f6a661d2L, I32WrapI64);
    builder.put(0x39e7fc40f69a4908L, I32Xor);
    builder.put(0x39e7fc40f756de40L, I32x4Abs);
    builder.put(0x39e7fc40f7577f17L, I32x4Add);
    builder.put(0x39e7fc40f756fdb2L, I32x4AllTrue);
    builder.put(0x39e7fc40f757092bL, I32x4Bitmask);
    builder.put(0x39e7fc40f757d4aeL, I32x4DotI16x8S);
    builder.put(0x39e7fc40f736bea4L, I32x4Eq);
    builder.put(0x39e7fc40f756c28cL, I32x4ExtaddPairwiseI16x8S);
    builder.put(0x39e7fc40f756ce88L, I32x4ExtaddPairwiseI16x8U);
    builder.put(0x39e7fc40f757245cL, I32x4ExtendHighI16x8S);
    builder.put(0x39e7fc40f7573fe1L, I32x4ExtendHighI16x8U);
    builder.put(0x39e7fc40f75718e3L, I32x4ExtendLowI16x8S);
    builder.put(0x39e7fc40f7573468L, I32x4ExtendLowI16x8U);
    builder.put(0x39e7fc40f757f41eL, I32x4ExtmulHighI16x8S);
    builder.put(0x39e7fc40f7582692L, I32x4ExtmulHighI16x8U);
    builder.put(0x39e7fc40f757e466L, I32x4ExtmulLowI16x8S);
    builder.put(0x39e7fc40f75803d6L, I32x4ExtmulLowI16x8U);
    builder.put(0x39e7fc40f721dcb1L, I32x4ExtractLane);
    builder.put(0x39e7fc40f73739cdL, I32x4GeS);
    builder.put(0x39e7fc40f737498dL, I32x4GeU);
    builder.put(0x39e7fc40f7370731L, I32x4GtS);
    builder.put(0x39e7fc40f7370ee6L, I32x4GtU);
    builder.put(0x39e7fc40f7371ea6L, I32x4LeS);
    builder.put(0x39e7fc40f7372a15L, I32x4LeU);
    builder.put(0x39e7fc40f736de14L, I32x4LtS);
    builder.put(0x39e7fc40f736efd0L, I32x4LtU);
    builder.put(0x39e7fc40f757bdbcL, I32x4MaxS);
    builder.put(0x39e7fc40f757c935L, I32x4MaxU);
    builder.put(0x39e7fc40f757a649L, I32x4MinS);
    builder.put(0x39e7fc40f757b243L, I32x4MinU);
    builder.put(0x39e7fc40f7579030L, I32x4Mul);
    builder.put(0x39e7fc40f736ce5cL, I32x4Ne);
    builder.put(0x39e7fc40f756edfaL, I32x4Neg);
    builder.put(0x39e7fc40f721f77dL, I32x4ReplaceLane);
    builder.put(0x39e7fc40f7574fefL, I32x4Shl);
    builder.put(0x39e7fc40f7575fa7L, I32x4ShrS);
    builder.put(0x39e7fc40f7576f5fL, I32x4ShrU);
    builder.put(0x39e7fc40f735762bL, I32x4Splat);
    builder.put(0x39e7fc40f7578ba2L, I32x4Sub);
    builder.put(0x39e7fc40f79650a4L, I32x4TruncSatF32x4S);
    builder.put(0x39e7fc40f7965863L, I32x4TruncSatF32x4U);
    builder.put(0x39e7fc40f7967f06L, I32x4TruncSatF64x2SZero);
    builder.put(0x39e7fc40f6a575b2L, I64Add);
    builder.put(0x39e7fc40f6a584bbL, I64And);
    builder.put(0x39e7fc40f6a57381L, I64Clz);
    builder.put(0x39e7fc40f524766fL, I64Const);
    builder.put(0x39e7fc40f6a5743cL, I64Ctz);
    builder.put(0x39e7fc40f6a577e3L, I64DivS);
    builder.put(0x39e7fc40f6a578a1L, I64DivU);
    builder.put(0x39e7fc40f68f41f2L, I64Eq);
    builder.put(0x39e7fc40f68f40ebL, I64Eqz);
    builder.put(0x39e7fc40f6a713b4L, I64Extend16S);
    builder.put(0x39e7fc40f6a71ad1L, I64Extend32S);
    builder.put(0x39e7fc40f6a70fbfL, I64Extend8S);
    builder.put(0x39e7fc40f6a67f32L, I64ExtendI32S);
    builder.put(0x39e7fc40f6a68657L, I64ExtendI32U);
    builder.put(0x39e7fc40f68f4a3cL, I64GeS);
    builder.put(0x39e7fc40f68f4af7L, I64GeU);
    builder.put(0x39e7fc40f68f474eL, I64GtS);
    builder.put(0x39e7fc40f68f4809L, I64GtU);
    builder.put(0x39e7fc40f68f48c6L, I64LeS);
    builder.put(0x39e7fc40f68f4981L, I64LeU);
    builder.put(0x39e7fc40f66fe4fdL, I64Load);
    builder.put(0x39e7fc40f67fe5e0L, I64Load16S);
    builder.put(0x39e7fc40f67ff96cL, I64Load16U);
    builder.put(0x39e7fc40f68016eaL, I64Load32S);
    builder.put(0x39e7fc40f6802c67L, I64Load32U);
    builder.put(0x39e7fc40f67faca6L, I64Load8S);
    builder.put(0x39e7fc40f67fd148L, I64Load8U);
    builder.put(0x39e7fc40f68f4369L, I64LtS);
    builder.put(0x39e7fc40f68f4693L, I64LtU);
    builder.put(0x39e7fc40f6a57728L, I64Mul);
    builder.put(0x39e7fc40f68f42aeL, I64Ne);
    builder.put(0x39e7fc40f6a58c10L, I64Or);
    builder.put(0x39e7fc40f6a574f7L, I64Popcnt);
    builder.put(0x39e7fc40f6a6ee37L, I64ReinterpretF64);
    builder.put(0x39e7fc40f6a57cccL, I64RemS);
    builder.put(0x39e7fc40f6a580c1L, I64RemU);
    builder.put(0x39e7fc40f6a5a31dL, I64Rotl);
    builder.put(0x39e7fc40f6a5aa3fL, I64Rotr);
    builder.put(0x39e7fc40f6a5972fL, I64Shl);
    builder.put(0x39e7fc40f6a59b29L, I64ShrS);
    builder.put(0x39e7fc40f6a59f23L, I64ShrU);
    builder.put(0x39e7fc40f6804e89L, I64Store);
    builder.put(0x39e7fc40f680f441L, I64Store16);
    builder.put(0x39e7fc40f6810ad4L, I64Store32);
    builder.put(0x39e7fc40f680dea9L, I64Store8);
    builder.put(0x39e7fc40f6a5766dL, I64Sub);
    builder.put(0x39e7fc40f6a68d79L, I64TruncF32S);
    builder.put(0x39e7fc40f6a6949bL, I64TruncF32U);
    builder.put(0x39e7fc40f6a69bbdL, I64TruncF64S);
    builder.put(0x39e7fc40f6a6a51bL, I64TruncF64U);
    builder.put(0x39e7fc40f6b59d52L, I64TruncSatF32S);
    builder.put(0x39e7fc40f6b5a8baL, I64TruncSatF32U);
    builder.put(0x39e7fc40f6b5b859L, I64TruncSatF64S);
    builder.put(0x39e7fc40f6b5c849L, I64TruncSatF64U);
    builder.put(0x39e7fc40f6a5900dL, I64Xor);
    builder.put(0x39e7fc40f758364aL, I64x2Abs);
    builder.put(0x39e7fc40f758c608L, I64x2Add);
    builder.put(0x39e7fc40f75851f8L, I64x2AllTrue);
    builder.put(0x39e7fc40f75861b0L, I64x2Bitmask);
    builder.put(0x39e7fc40f7375664L, I64x2Eq);
    builder.put(0x39e7fc40f75878a2L, I64x2ExtendHighI32x4S);
    builder.put(0x39e7fc40f7589824L, I64x2ExtendHighI32x4U);
    builder.put(0x39e7fc40f7586d29L, I64x2ExtendLowI32x4S);
    builder.put(0x39e7fc40f758886cL, I64x2ExtendLowI32x4U);
    builder.put(0x39e7fc40f75901b5L, I64x2ExtmulHighI32x4S);
    builder.put(0x39e7fc40f75918a7L, I64x2ExtmulHighI32x4U);
    builder.put(0x39e7fc40f758f205L, I64x2ExtmulLowI32x4S);
    builder.put(0x39e7fc40f7590d2eL, I64x2ExtmulLowI32x4U);
    builder.put(0x39e7fc40f72210d4L, I64x2ExtractLane);
    builder.put(0x39e7fc40f737a0ffL, I64x2GeS);
    builder.put(0x39e7fc40f7377da3L, I64x2GtS);
    builder.put(0x39e7fc40f7379589L, I64x2LeS);
    builder.put(0x39e7fc40f737722aL, I64x2LtS);
    builder.put(0x39e7fc40f758e578L, I64x2Mul);
    builder.put(0x39e7fc40f73766b1L, I64x2Ne);
    builder.put(0x39e7fc40f7584689L, I64x2Neg);
    builder.put(0x39e7fc40f7222a2eL, I64x2ReplaceLane);
    builder.put(0x39e7fc40f758a39dL, I64x2Shl);
    builder.put(0x39e7fc40f758af16L, I64x2ShrS);
    builder.put(0x39e7fc40f758ba8fL, I64x2ShrU);
    builder.put(0x39e7fc40f73581a4L, I64x2Splat);
    builder.put(0x39e7fc40f758d5c0L, I64x2Sub);
    builder.put(0x39e7fc40f738b8ddL, I8x16Abs);
    builder.put(0x39e7fc40f73947f2L, I8x16Add);
    builder.put(0x39e7fc40f73955a9L, I8x16AddSatS);
    builder.put(0x39e7fc40f7396122L, I8x16AddSatU);
    builder.put(0x39e7fc40f738e094L, I8x16AllTrue);
    builder.put(0x39e7fc40f739d3ddL, I8x16AvgrU);
    builder.put(0x39e7fc40f738ef37L, I8x16Bitmask);
    builder.put(0x39e7fc40f735a8b1L, I8x16Eq);
    builder.put(0x39e7fc40f7204bb6L, I8x16ExtractLaneS);
    builder.put(0x39e7fc40f720f26bL, I8x16ExtractLaneU);
    builder.put(0x39e7fc40f73615dbL, I8x16GeS);
    builder.put(0x39e7fc40f736214aL, I8x16GeU);
    builder.put(0x39e7fc40f735dbd7L, I8x16GtS);
    builder.put(0x39e7fc40f735ecf7L, I8x16GtU);
    builder.put(0x39e7fc40f735fd3fL, I8x16LeS);
    builder.put(0x39e7fc40f7360946L, I8x16LeU);
    builder.put(0x39e7fc40f735c0a6L, I8x16LtS);
    builder.put(0x39e7fc40f735d05eL, I8x16LtU);
    builder.put(0x39e7fc40f739bce9L, I8x16MaxS);
    builder.put(0x39e7fc40f739c864L, I8x16MaxU);
    builder.put(0x39e7fc40f739a1b8L, I8x16MinS);
    builder.put(0x39e7fc40f739b170L, I8x16MinU);
    builder.put(0x39e7fc40f738ff4aL, I8x16NarrowI16x8S);
    builder.put(0x39e7fc40f7390f02L, I8x16NarrowI16x8U);
    builder.put(0x39e7fc40f735b52dL, I8x16Ne);
    builder.put(0x39e7fc40f738c9a2L, I8x16Neg);
    builder.put(0x39e7fc40f738d51bL, I8x16Popcnt);
    builder.put(0x39e7fc40f7210d37L, I8x16ReplaceLane);
    builder.put(0x39e7fc40f7391a7bL, I8x16Shl);
    builder.put(0x39e7fc40f7392f4fL, I8x16ShrS);
    builder.put(0x39e7fc40f7393b1bL, I8x16ShrU);
    builder.put(0x39e7fc40f70d2cc3L, I8x16Shuffle);
    builder.put(0x39e7fc40f73559aeL, I8x16Splat);
    builder.put(0x39e7fc40f7396f5cL, I8x16Sub);
    builder.put(0x39e7fc40f7397ad5L, I8x16SubSatS);
    builder.put(0x39e7fc40f739864fL, I8x16SubSatU);
    builder.put(0x39e7fc40f73522f8L, I8x16Swizzle);
    builder.put(0x39e7fc40f60e0df9L, If);
    builder.put(0x39e7fc40f60e5c49L, IfElse);
    builder.put(0x601bfff8ee1ef511L, Import);
    builder.put(0x601bfff8ee1ef51dL, ImportDesc);
    builder.put(0x601bfff8ee1f74b2L, ImportFuncDesc);
    builder.put(0x601bfff8ee1f74d1L, ImportGlobalDesc);
    builder.put(0x601bfff8ee1f74c8L, ImportMemDesc);
    builder.put(0x601bfff8ee15303eL, ImportSection);
    builder.put(0x601bfff8ee1f74c1L, ImportTableDesc);
    builder.put(0x39e7fc40f52b2160L, Index);
    builder.put(0x39e7fc40f4f6eb36L, Instr);
    builder.put(0x7c255ef7550602c9L, InstructionList);
    builder.put(0x39e7fc40f63ae4a8L, LabelIdx);
    builder.put(0x39e7fc40f6d62480L, LaneIdx);
    builder.put(0x601bfff8ed828ec4L, Limits);
    builder.put(0x39e7fc40f662220cL, LocalGet);
    builder.put(0x39e7fc40f6622210L, LocalIdx);
    builder.put(0x39e7fc40f662c72bL, LocalSet);
    builder.put(0x39e7fc40f662dd82L, LocalTee);
    builder.put(0x39e7fc40f53e0dd6L, Locals);
    builder.put(0x39e7fc40f60e3b85L, Loop);
    builder.put(0x6f2b0ba0328d2120L, Mem);
    builder.put(0x39e7fc40f66ec7baL, MemArg);
    builder.put(0x39e7fc40f52bc30eL, MemExport);
    builder.put(0x39e7fc40f52b27f1L, MemIdx);
    builder.put(0x6f2b0ba0328d211dL, MemSection);
    builder.put(0x601bfff8ed828f46L, MemType);
    builder.put(0x39e7fc40f6837160L, MemoryCopy);
    builder.put(0x39e7fc40f6843dd2L, MemoryFill);
    builder.put(0x39e7fc40f6815d80L, MemoryGrow);
    builder.put(0x39e7fc40f6816642L, MemoryInit);
    builder.put(0x39e7fc40f681236cL, MemorySize);
    builder.put(0x601bfff8ed5920a4L, Module);
    builder.put(0x601bfff8ed886ae4L, ModuleSection);
    builder.put(0x39e7fc40f58419a1L, Nop);
    builder.put(0x601bfff8ed7a49a7L, NumType);
    builder.put(0x39e7fc40f7bb0b70L, PassiveData);
    builder.put(0x39e7fc40f7e38066L, PassiveElem);
    builder.put(0x39e7fc40f7e6014aL, PassiveExprsElem);
    builder.put(0x39e7fc40f73522faL, PlainVectorInstr);
    builder.put(0x39e7fc40f57e15e6L, RefFunc);
    builder.put(0x39e7fc40f57de574L, RefIsNull);
    builder.put(0x39e7fc40f57ce9d0L, RefNull);
    builder.put(0x601bfff8ed7aef41L, RefType);
    builder.put(0x601bfff8ed7aee8aL, ResultType);
    builder.put(0x39e7fc40f63b819fL, Return);
    builder.put(0x39e7fc40f6575ddbL, Select);
    builder.put(0x39e7fc40f6575ffeL, SelectTypes);
    builder.put(0x39e7fc40f5382b4fL, StartSection);
    builder.put(0x6f2b0ba03281be3eL, Table);
    builder.put(0x39e7fc40f66d9850L, TableCopy);
    builder.put(0x39e7fc40f52bb20aL, TableExport);
    builder.put(0x39e7fc40f66ea676L, TableFill);
    builder.put(0x39e7fc40f66b1ec8L, TableGet);
    builder.put(0x39e7fc40f66e4639L, TableGrow);
    builder.put(0x39e7fc40f52b2610L, TableIdx);
    builder.put(0x39e7fc40f66bd1d4L, TableInit);
    builder.put(0x6f2b0ba03281be3bL, TableSection);
    builder.put(0x39e7fc40f66bb565L, TableSet);
    builder.put(0x39e7fc40f66e8379L, TableSize);
    builder.put(0x601bfff8ed828f4dL, TableType);
    builder.put(0x601bfff8ee1ef534L, TypeIdx);
    builder.put(0x39e7fc40f584baf2L, TypeIdxBlockType);
    builder.put(0x601bfff8edaa532aL, TypeSection);
    builder.put(0x601bfff8ed828ecaL, U32Val);
    builder.put(0x39e7fc40f58414e5L, Unreachable);
    builder.put(0x39e7fc40f7385c7dL, V128And);
    builder.put(0x39e7fc40f73867f6L, V128AndNot);
    builder.put(0x39e7fc40f738ad64L, V128AnyTrue);
    builder.put(0x39e7fc40f7389ec8L, V128Bitselect);
    builder.put(0x39e7fc40f6f9fa0eL, V128Const);
    builder.put(0x39e7fc40f6b5d765L, V128Load);
    builder.put(0x39e7fc40f6d72ba5L, V128Load16Lane);
    builder.put(0x39e7fc40f6c5f423L, V128Load16Splat);
    builder.put(0x39e7fc40f6c56011L, V128Load16x4S);
    builder.put(0x39e7fc40f6c56038L, V128Load16x4U);
    builder.put(0x39e7fc40f6d75748L, V128Load32Lane);
    builder.put(0x39e7fc40f6c6106eL, V128Load32Splat);
    builder.put(0x39e7fc40f6d5c21dL, V128Load32Zero);
    builder.put(0x39e7fc40f6c598e9L, V128Load32x2S);
    builder.put(0x39e7fc40f6c5bd7bL, V128Load32x2U);
    builder.put(0x39e7fc40f6d7872aL, V128Load64Lane);
    builder.put(0x39e7fc40f6c637ceL, V128Load64Splat);
    builder.put(0x39e7fc40f6d5dd5dL, V128Load64Zero);
    builder.put(0x39e7fc40f6d62478L, V128Load8Lane);
    builder.put(0x39e7fc40f6c5dd70L, V128Load8Splat);
    builder.put(0x39e7fc40f6c5143fL, V128Load8x8S);
    builder.put(0x39e7fc40f6c52f3dL, V128Load8x8U);
    builder.put(0x39e7fc40f7385011L, V128Not);
    builder.put(0x39e7fc40f7387e23L, V128Or);
    builder.put(0x39e7fc40f6d5fdd9L, V128Store);
    builder.put(0x39e7fc40f6d7d5cbL, V128Store16Lane);
    builder.put(0x39e7fc40f6d800efL, V128Store32Lane);
    builder.put(0x39e7fc40f6d8267bL, V128Store64Lane);
    builder.put(0x39e7fc40f6d7aeb3L, V128Store8Lane);
    builder.put(0x39e7fc40f73889f2L, V128Xor);
    builder.put(0x39e7fc40f58423b5L, ValBlockType);
    builder.put(0x601bfff8ed7d6e6cL, ValTypeContainer);
    builder.put(0x601bfff8ed82945cL, VecType);
    builder.put(0x39e7fc40f7968ebeL, i32x4TruncSatF64x2UZero);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
