package WebAssembly.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import WebAssembly.structure.Bytes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Limits__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed828ec4L, "WebAssembly.structure.Limits");

  public static final SMethod<Integer> byte_size_id60rZZzHEXgh = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("byte_size").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("60rZZzHEXgh").build();
  public static final SMethod<byte[]> bytes_id60rZZzHEXiv = new SMethodBuilder<byte[]>(new SJavaCompoundTypeImpl(byte[].class)).name("bytes").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("60rZZzHEXiv").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(byte_size_id60rZZzHEXgh, bytes_id60rZZzHEXiv);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static int byte_size_id60rZZzHEXgh(@NotNull SNode __thisNode__) {
    if ((SLinkOperations.getTarget(__thisNode__, LINKS.max$gc7X) == null)) {
      byte[] minBytes = Bytes.u32BytesLeb128(SPropertyOperations.getInteger(SLinkOperations.getTarget(__thisNode__, LINKS.min$gbDV), PROPS.val$gb9X));

      return 1 + minBytes.length;
    } else {
      byte[] minBytes = Bytes.u32BytesLeb128(SPropertyOperations.getInteger(SLinkOperations.getTarget(__thisNode__, LINKS.min$gbDV), PROPS.val$gb9X));
      byte[] maxBytes = Bytes.u32BytesLeb128(SPropertyOperations.getInteger(SLinkOperations.getTarget(__thisNode__, LINKS.max$gc7X), PROPS.val$gb9X));
      return 1 + minBytes.length + maxBytes.length;
    }
  }
  /*package*/ static byte[] bytes_id60rZZzHEXiv(@NotNull SNode __thisNode__) {
    if ((SLinkOperations.getTarget(__thisNode__, LINKS.max$gc7X) == null)) {
      byte[] minBytes = Bytes.u32BytesLeb128(SPropertyOperations.getInteger(SLinkOperations.getTarget(__thisNode__, LINKS.min$gbDV), PROPS.val$gb9X));
      byte[] bytes = new byte[1 + minBytes.length];
      bytes[0] = Bytes.u8Byte(0x00);
      System.arraycopy(minBytes, 0, bytes, 1, minBytes.length);
      return bytes;

    } else {
      byte[] minBytes = Bytes.u32BytesLeb128(SPropertyOperations.getInteger(SLinkOperations.getTarget(__thisNode__, LINKS.min$gbDV), PROPS.val$gb9X));
      byte[] maxBytes = Bytes.u32BytesLeb128(SPropertyOperations.getInteger(SLinkOperations.getTarget(__thisNode__, LINKS.max$gc7X), PROPS.val$gb9X));

      byte[] bytes = new byte[1 + minBytes.length + maxBytes.length];
      bytes[0] = Bytes.u8Byte(0x01);
      System.arraycopy(minBytes, 0, bytes, 1, minBytes.length);
      System.arraycopy(maxBytes, 0, bytes, 1 + minBytes.length, maxBytes.length);
      return bytes;

    }
  }

  /*package*/ Limits__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Integer) byte_size_id60rZZzHEXgh(node));
      case 1:
        return (T) ((byte[]) bytes_id60rZZzHEXiv(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink min$gbDV = MetaAdapterFactory.getContainmentLink(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed828ec4L, 0x601bfff8ed828eceL, "min");
    /*package*/ static final SContainmentLink max$gc7X = MetaAdapterFactory.getContainmentLink(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed828ec4L, 0x601bfff8ed828ed0L, "max");
  }

  private static final class PROPS {
    /*package*/ static final SProperty val$gb9X = MetaAdapterFactory.getProperty(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed828ecaL, 0x601bfff8ed828ecbL, "val");
  }
}
