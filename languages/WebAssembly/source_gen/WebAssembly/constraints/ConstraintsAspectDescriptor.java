package WebAssembly.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new ActiveData_Constraints();
      case 1:
        return new ActiveIndexedData_Constraints();
      case 2:
        return new I8x16Shuffle_Constraints();
      case 3:
        return new NumType_Constraints();
      case 4:
        return new PassiveData_Constraints();
      case 5:
        return new RefType_Constraints();
      case 6:
        return new TypeIdx_Constraints();
      case 7:
        return new V128Const_Constraints();
      case 8:
        return new VecType_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f7b602cdL), MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f7bb7253L), MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f70d2cc3L), MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed7a49a7L), MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f7bb0b70L), MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed7aef41L), MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ee1ef534L), MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x39e7fc40f6f9fa0eL), MetaIdFactory.conceptId(0xf0ceec7784bd4104L, 0xb53284a17dffbb8aL, 0x601bfff8ed82945cL)).seal();
}
